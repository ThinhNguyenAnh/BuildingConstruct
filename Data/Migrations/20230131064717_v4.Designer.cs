// <auto-generated />
using System;
using Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(BuildingConstructDbContext))]
    [Migration("20230131064717_v4")]
    partial class v4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Entities.AppliedPost", b =>
                {
                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("BuilderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PostID", "BuilderID");

                    b.HasIndex("BuilderID");

                    b.HasIndex("GroupID");

                    b.ToTable("AppliedPost", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StoreID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("StoreID");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("Data.Entities.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductID");

                    b.ToTable("BillDetail", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Builder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Place")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeID");

                    b.ToTable("Builders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = new Guid("d7285fb7-835b-4680-a18c-673bd71f63d9"),
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 303, DateTimeKind.Local).AddTicks(2363),
                            Place = 60
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = new Guid("d39ae0a6-9b2d-4421-be4a-cc294cec054f"),
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 309, DateTimeKind.Local).AddTicks(5009),
                            Place = 61
                        });
                });

            modelBuilder.Entity("Data.Entities.BuilderPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BuilderID")
                        .HasColumnType("int");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("PostCategories")
                        .HasColumnType("int");

                    b.Property<string>("Salaries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuilderID");

                    b.ToTable("BuilderPosts");
                });

            modelBuilder.Entity("Data.Entities.BuilderPostSkill", b =>
                {
                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("BuilderPostID")
                        .HasColumnType("int");

                    b.HasKey("SkillID", "BuilderPostID");

                    b.HasIndex("BuilderPostID");

                    b.ToTable("BuilderPostSkill", (string)null);
                });

            modelBuilder.Entity("Data.Entities.BuilderPostType", b =>
                {
                    b.Property<Guid>("TypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuilderPostID")
                        .HasColumnType("int");

                    b.HasKey("TypeID", "BuilderPostID");

                    b.HasIndex("BuilderPostID");

                    b.ToTable("BuilderPostType", (string)null);
                });

            modelBuilder.Entity("Data.Entities.BuilderSkill", b =>
                {
                    b.Property<int>("BuilderSkillID")
                        .HasColumnType("int");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.HasKey("BuilderSkillID", "SkillID");

                    b.HasIndex("SkillID");

                    b.ToTable("BuilderSkills", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Cart", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Categories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Data.Entities.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contractors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Bat dong san Vinhome",
                            CreateBy = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f6"),
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 327, DateTimeKind.Local).AddTicks(5888),
                            Website = "abcdef.com.vn"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Bat dong san Thang Long",
                            CreateBy = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f7"),
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 333, DateTimeKind.Local).AddTicks(6078),
                            Website = "nguyenduy.com.vn"
                        });
                });

            modelBuilder.Entity("Data.Entities.ContractorPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Benefit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractorID")
                        .HasColumnType("int");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("int");

                    b.Property<int>("PeopeRemained")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("PostCategories")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Required")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salaries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<bool?>("isApplied")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractorID");

                    b.ToTable("ContractorPosts", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ContractorPostProduct", b =>
                {
                    b.Property<int>("ProductSystemID")
                        .HasColumnType("int");

                    b.Property<int>("ContractorPostID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductSystemID", "ContractorPostID");

                    b.HasIndex("ContractorPostID");

                    b.ToTable("ContractorPostProduct", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ContractorPostSkill", b =>
                {
                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("ContractorPostID")
                        .HasColumnType("int");

                    b.HasKey("SkillID", "ContractorPostID");

                    b.HasIndex("ContractorPostID");

                    b.ToTable("ContractorPostSkills", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ContractorPostType", b =>
                {
                    b.Property<Guid>("TypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContractorPostID")
                        .HasColumnType("int");

                    b.HasKey("TypeID", "ContractorPostID");

                    b.HasIndex("ContractorPostID");

                    b.ToTable("ContractorPostType", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BuilderID")
                        .HasColumnType("int");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuilderID");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Data.Entities.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TypeID");

                    b.ToTable("GroupMember", (string)null);
                });

            modelBuilder.Entity("Data.Entities.MaterialStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialStores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f4"),
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 315, DateTimeKind.Local).AddTicks(5323),
                            Place = 52
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f5"),
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 321, DateTimeKind.Local).AddTicks(5209),
                            Place = 51
                        });
                });

            modelBuilder.Entity("Data.Entities.PostCommitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("BuilderID")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("OptionalTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salaries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "PostID", "BuilderID", "ContractorID");

                    b.HasIndex("BuilderID");

                    b.HasIndex("ContractorID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserId");

                    b.ToTable("Commitment", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ProductCategories", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "CategoriesID");

                    b.HasIndex("CategoriesID");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaterialStoreID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldQuantities")
                        .HasColumnType("int");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialStoreID");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ProductSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FromSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductSystems", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ProductSystemCategories", b =>
                {
                    b.Property<int>("ProductSystemID")
                        .HasColumnType("int");

                    b.Property<int>("SystemCategoriesID")
                        .HasColumnType("int");

                    b.HasKey("ProductSystemID", "SystemCategoriesID");

                    b.HasIndex("SystemCategoriesID");

                    b.ToTable("ProductSystemCategories", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("52ec6e78-6732-43bf-adab-9cfa2e5da268"),
                            ConcurrencyStamp = "fe125344-ef81-4858-b652-89533999b026",
                            Description = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("dc48ba58-ddcb-41de-96fe-e41327e5f313"),
                            ConcurrencyStamp = "337ab3f1-a177-466c-84b6-c2bb7f0d406e",
                            Description = "User",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("20efd516-f16c-41b3-b11d-bc908cd2056b"),
                            ConcurrencyStamp = "10690cca-0ec3-4d62-9106-2e5a1ce84f75",
                            Description = "Contractor",
                            Name = "Contractor",
                            NormalizedName = "CONTRACTOR"
                        },
                        new
                        {
                            Id = new Guid("a4fbc29e-9749-4ea0-bcaa-67fc9f104bd1"),
                            ConcurrencyStamp = "79250aa7-9aaf-499a-b619-ef39d3d9b8e4",
                            Description = "Store",
                            Name = "Store",
                            NormalizedName = "STORE"
                        });
                });

            modelBuilder.Entity("Data.Entities.Save", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BuilderPostId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorPostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("BuilderPostId");

                    b.HasIndex("ContractorPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Saves", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("FromSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SmallBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BillID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillID");

                    b.ToTable("SmallBill", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SmallBillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SmallBillID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("SmallBillID");

                    b.ToTable("SmallBillDetail", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SystemCategories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("SystemCategories", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types", (string)null);
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuilderId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaterialStoreID")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VerifyID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuilderId")
                        .IsUnique()
                        .HasFilter("[BuilderId] IS NOT NULL");

                    b.HasIndex("ContractorId")
                        .IsUnique()
                        .HasFilter("[ContractorId] IS NOT NULL");

                    b.HasIndex("MaterialStoreID")
                        .IsUnique()
                        .HasFilter("[MaterialStoreID] IS NOT NULL");

                    b.HasIndex("VerifyID")
                        .IsUnique()
                        .HasFilter("[VerifyID] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7285fb7-835b-4680-a18c-673bd71f63d9"),
                            AccessFailedCount = 0,
                            Address = "18, Phuoc Thien, Nhon Trach, Dong Nai",
                            BuilderId = 1,
                            ConcurrencyStamp = "d19ae633-af02-41e1-b576-81425d302b21",
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DOB = new DateTime(2001, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "namhoaidoan15@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hoai",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 297, DateTimeKind.Local).AddTicks(2299),
                            LastName = "Nam",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOobC6b103WXmdsvqug5vWhfVbT5BEZqYKwzgJc9OrvDVRkT+NlodeBk+AQ+kxP2Rw==",
                            PhoneNumber = "0879411575",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "",
                            Status = 0,
                            Token = "xxx",
                            TwoFactorEnabled = false,
                            UserName = "namhoaidoan15@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d39ae0a6-9b2d-4421-be4a-cc294cec054f"),
                            AccessFailedCount = 0,
                            Address = "18, Phuoc Thien, Nhon Trach, Dong Nai",
                            BuilderId = 2,
                            ConcurrencyStamp = "e20d2519-d15a-47b9-93ca-a08904612a67",
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DOB = new DateTime(2001, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "namhoaidoan1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hoai",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 303, DateTimeKind.Local).AddTicks(2381),
                            LastName = "Nam Doan Vu",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDkehPkJl1hzTH7lkxWfdUJbqNnRAvZw13d+dEHRqAp/i1GuupiCg8QKIi2E/K8oOg==",
                            PhoneNumber = "0392799276",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "",
                            Status = 0,
                            Token = "xxx",
                            TwoFactorEnabled = false,
                            UserName = "namhoaidoan1@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f4"),
                            AccessFailedCount = 0,
                            Address = "18, Phuoc Thien, Nhon Trach, Dong Nai",
                            ConcurrencyStamp = "ee328ad7-8836-4222-b2f4-a2395b395331",
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DOB = new DateTime(1999, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "namhoai1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Store",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 309, DateTimeKind.Local).AddTicks(5034),
                            LastName = "Nguyen Anh Vu",
                            LockoutEnabled = false,
                            MaterialStoreID = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEIFgTla1/+0+u0CBAKBdiJ8caK7Pqpuf6alZ98JmHIBmb7NqOqsoYqY86JmJcXl5YQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "",
                            Status = 1,
                            Token = "xxx",
                            TwoFactorEnabled = false,
                            UserName = "namhoai1@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f5"),
                            AccessFailedCount = 0,
                            Address = "18, Phuoc Thien, Nhon Trach, Dong Nai",
                            ConcurrencyStamp = "3aeb9eff-0bc3-476e-882d-a5ba67bf998d",
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DOB = new DateTime(1995, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoainam@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Store",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 315, DateTimeKind.Local).AddTicks(5347),
                            LastName = "Dien May Xanh",
                            LockoutEnabled = false,
                            MaterialStoreID = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAEALzcLIMzhN1YgLXqxhVggVj6681gOjlCHl8ItTVDSvc8o0GacFo/I/qhLe84tvDww==",
                            PhoneNumber = "033451444",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "",
                            Status = 1,
                            Token = "xxx",
                            TwoFactorEnabled = false,
                            UserName = "hoainam@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f6"),
                            AccessFailedCount = 0,
                            Address = "18, Phuoc Thien, Nhon Trach, Dong Nai",
                            ConcurrencyStamp = "1e6850a5-cf9e-4432-b7f8-211e70e1a899",
                            ContractorId = 1,
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DOB = new DateTime(1995, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoainam123@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nguyen",
                            Gender = 1,
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 321, DateTimeKind.Local).AddTicks(5218),
                            LastName = "Hong",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGWtlFlOaggYmcvYsEEf6B4WhcgaGbqmomlosdOBA4vRTRTVBSl/2e27VgtKBrL8dQ==",
                            PhoneNumber = "0333999444",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "",
                            Status = 0,
                            Token = "xxx",
                            TwoFactorEnabled = false,
                            UserName = "hoainam123@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f7"),
                            AccessFailedCount = 0,
                            Address = "18, Phuoc Thien, Nhon Trach, Dong Nai",
                            ConcurrencyStamp = "2db4e992-9df5-486a-afc5-c73d383d787c",
                            ContractorId = 2,
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DOB = new DateTime(1995, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoainam2001@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nguyen",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2023, 1, 31, 13, 47, 16, 327, DateTimeKind.Local).AddTicks(5914),
                            LastName = "Duy",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEIj1pHLzdGA3RholGY88mYu2dHAjULUQPotVo0+1jyQB5eeN36peWTjs3vDCv6q1A==",
                            PhoneNumber = "0333999444",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "",
                            Status = 0,
                            Token = "xxx",
                            TwoFactorEnabled = false,
                            UserName = "hoainam2001@gmail.com"
                        });
                });

            modelBuilder.Entity("Data.Entities.Verify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FaceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.ToTable("IdentitficationCards", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d7285fb7-835b-4680-a18c-673bd71f63d9"),
                            RoleId = new Guid("dc48ba58-ddcb-41de-96fe-e41327e5f313")
                        },
                        new
                        {
                            UserId = new Guid("d39ae0a6-9b2d-4421-be4a-cc294cec054f"),
                            RoleId = new Guid("dc48ba58-ddcb-41de-96fe-e41327e5f313")
                        },
                        new
                        {
                            UserId = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f4"),
                            RoleId = new Guid("a4fbc29e-9749-4ea0-bcaa-67fc9f104bd1")
                        },
                        new
                        {
                            UserId = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f5"),
                            RoleId = new Guid("a4fbc29e-9749-4ea0-bcaa-67fc9f104bd1")
                        },
                        new
                        {
                            UserId = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f6"),
                            RoleId = new Guid("20efd516-f16c-41b3-b11d-bc908cd2056b")
                        },
                        new
                        {
                            UserId = new Guid("7ba0a48f-551b-4de5-b853-81a1243267f7"),
                            RoleId = new Guid("20efd516-f16c-41b3-b11d-bc908cd2056b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.AppliedPost", b =>
                {
                    b.HasOne("Data.Entities.Builder", "Builder")
                        .WithMany("AppliedPosts")
                        .HasForeignKey("BuilderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Group", "Group")
                        .WithMany("AppliedPosts")
                        .HasForeignKey("GroupID");

                    b.HasOne("Data.Entities.ContractorPost", "ContractorPosts")
                        .WithMany("AppliedPosts")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Builder");

                    b.Navigation("ContractorPosts");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Data.Entities.Bill", b =>
                {
                    b.HasOne("Data.Entities.Contractor", "Contractor")
                        .WithMany("Bills")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.MaterialStore", "MaterialStore")
                        .WithMany("Bills")
                        .HasForeignKey("StoreID");

                    b.Navigation("Contractor");

                    b.Navigation("MaterialStore");
                });

            modelBuilder.Entity("Data.Entities.BillDetail", b =>
                {
                    b.HasOne("Data.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Products", "Products")
                        .WithMany("BillDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Builder", b =>
                {
                    b.HasOne("Data.Entities.Type", "Type")
                        .WithMany("Builder")
                        .HasForeignKey("TypeID");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Data.Entities.BuilderPost", b =>
                {
                    b.HasOne("Data.Entities.Builder", "Builder")
                        .WithMany("Posts")
                        .HasForeignKey("BuilderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Builder");
                });

            modelBuilder.Entity("Data.Entities.BuilderPostSkill", b =>
                {
                    b.HasOne("Data.Entities.BuilderPost", "BuilderPost")
                        .WithMany("BuilderPostSkills")
                        .HasForeignKey("BuilderPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Skill", "Skills")
                        .WithMany("BuilderPostSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuilderPost");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Data.Entities.BuilderPostType", b =>
                {
                    b.HasOne("Data.Entities.BuilderPost", "BuilderPosts")
                        .WithMany("BuilderPostTypes")
                        .HasForeignKey("BuilderPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Type", "Types")
                        .WithMany("BuilderPostTypes")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuilderPosts");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Data.Entities.BuilderSkill", b =>
                {
                    b.HasOne("Data.Entities.Builder", "Builder")
                        .WithMany("BuilderSkills")
                        .HasForeignKey("BuilderSkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Skill", "Skill")
                        .WithMany("BuilderSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Builder");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Entities.Cart", b =>
                {
                    b.HasOne("Data.Entities.Products", "Products")
                        .WithMany("Carts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.ContractorPost", b =>
                {
                    b.HasOne("Data.Entities.Contractor", "Contractor")
                        .WithMany("ContractorPosts")
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Data.Entities.ContractorPostProduct", b =>
                {
                    b.HasOne("Data.Entities.ContractorPost", "ContractorPost")
                        .WithMany("ContractorPostProducts")
                        .HasForeignKey("ContractorPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ProductSystem", "ProductSystem")
                        .WithMany("ContractorPostProducts")
                        .HasForeignKey("ProductSystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorPost");

                    b.Navigation("ProductSystem");
                });

            modelBuilder.Entity("Data.Entities.ContractorPostSkill", b =>
                {
                    b.HasOne("Data.Entities.ContractorPost", "ContractorPost")
                        .WithMany("PostSkills")
                        .HasForeignKey("ContractorPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Skill", "Skills")
                        .WithMany("ContractorPostSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorPost");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Data.Entities.ContractorPostType", b =>
                {
                    b.HasOne("Data.Entities.ContractorPost", "ContractorPost")
                        .WithMany("ContractorPostTypes")
                        .HasForeignKey("ContractorPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Type", "Type")
                        .WithMany("ContractorPostTypes")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorPost");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Data.Entities.Group", b =>
                {
                    b.HasOne("Data.Entities.Builder", "Builder")
                        .WithMany("Groups")
                        .HasForeignKey("BuilderID");

                    b.Navigation("Builder");
                });

            modelBuilder.Entity("Data.Entities.GroupMember", b =>
                {
                    b.HasOne("Data.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId");

                    b.HasOne("Data.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Data.Entities.PostCommitment", b =>
                {
                    b.HasOne("Data.Entities.Builder", "Builder")
                        .WithMany("PostCommitments")
                        .HasForeignKey("BuilderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Contractor", "Contractor")
                        .WithMany("PostCommitments")
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Group", "Group")
                        .WithMany("PostCommitments")
                        .HasForeignKey("GroupID");

                    b.HasOne("Data.Entities.ContractorPost", "ContractorPosts")
                        .WithMany("PostCommitments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany("PostCommitments")
                        .HasForeignKey("UserId");

                    b.Navigation("Builder");

                    b.Navigation("Contractor");

                    b.Navigation("ContractorPosts");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Data.Entities.ProductCategories", b =>
                {
                    b.HasOne("Data.Entities.Categories", "Categories")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Products", "Products")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Products", b =>
                {
                    b.HasOne("Data.Entities.MaterialStore", "MaterialStore")
                        .WithMany("Products")
                        .HasForeignKey("MaterialStoreID");

                    b.Navigation("MaterialStore");
                });

            modelBuilder.Entity("Data.Entities.ProductSystemCategories", b =>
                {
                    b.HasOne("Data.Entities.ProductSystem", "ProductSystem")
                        .WithMany("ProductSystemCategories")
                        .HasForeignKey("ProductSystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SystemCategories", "SystemCategories")
                        .WithMany("ProductSystemCategories")
                        .HasForeignKey("SystemCategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSystem");

                    b.Navigation("SystemCategories");
                });

            modelBuilder.Entity("Data.Entities.Save", b =>
                {
                    b.HasOne("Data.Entities.BuilderPost", "BuilderPost")
                        .WithMany("Saves")
                        .HasForeignKey("BuilderPostId");

                    b.HasOne("Data.Entities.ContractorPost", "ContractorPost")
                        .WithMany("Saves")
                        .HasForeignKey("ContractorPostId");

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Saves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuilderPost");

                    b.Navigation("ContractorPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Skill", b =>
                {
                    b.HasOne("Data.Entities.Type", "Type")
                        .WithMany("Skill")
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Data.Entities.SmallBill", b =>
                {
                    b.HasOne("Data.Entities.Bill", "Bill")
                        .WithMany("SmallBills")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Data.Entities.SmallBillDetail", b =>
                {
                    b.HasOne("Data.Entities.Products", "Products")
                        .WithMany("SmallBillDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SmallBill", "SmallBill")
                        .WithMany("Details")
                        .HasForeignKey("SmallBillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("SmallBill");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Builder", "Builder")
                        .WithOne("User")
                        .HasForeignKey("Data.Entities.User", "BuilderId");

                    b.HasOne("Data.Entities.Contractor", "Contractor")
                        .WithOne("User")
                        .HasForeignKey("Data.Entities.User", "ContractorId");

                    b.HasOne("Data.Entities.MaterialStore", "MaterialStore")
                        .WithOne("User")
                        .HasForeignKey("Data.Entities.User", "MaterialStoreID");

                    b.HasOne("Data.Entities.Verify", "Verify")
                        .WithOne("User")
                        .HasForeignKey("Data.Entities.User", "VerifyID");

                    b.Navigation("Builder");

                    b.Navigation("Contractor");

                    b.Navigation("MaterialStore");

                    b.Navigation("Verify");
                });

            modelBuilder.Entity("Data.Entities.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("SmallBills");
                });

            modelBuilder.Entity("Data.Entities.Builder", b =>
                {
                    b.Navigation("AppliedPosts");

                    b.Navigation("BuilderSkills");

                    b.Navigation("Groups");

                    b.Navigation("PostCommitments");

                    b.Navigation("Posts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.BuilderPost", b =>
                {
                    b.Navigation("BuilderPostSkills");

                    b.Navigation("BuilderPostTypes");

                    b.Navigation("Saves");
                });

            modelBuilder.Entity("Data.Entities.Categories", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Data.Entities.Contractor", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("ContractorPosts");

                    b.Navigation("PostCommitments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.ContractorPost", b =>
                {
                    b.Navigation("AppliedPosts");

                    b.Navigation("ContractorPostProducts");

                    b.Navigation("ContractorPostTypes");

                    b.Navigation("PostCommitments");

                    b.Navigation("PostSkills");

                    b.Navigation("Saves");
                });

            modelBuilder.Entity("Data.Entities.Group", b =>
                {
                    b.Navigation("AppliedPosts");

                    b.Navigation("GroupMembers");

                    b.Navigation("PostCommitments");
                });

            modelBuilder.Entity("Data.Entities.MaterialStore", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Products", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("Carts");

                    b.Navigation("ProductCategories");

                    b.Navigation("SmallBillDetails");
                });

            modelBuilder.Entity("Data.Entities.ProductSystem", b =>
                {
                    b.Navigation("ContractorPostProducts");

                    b.Navigation("ProductSystemCategories");
                });

            modelBuilder.Entity("Data.Entities.Skill", b =>
                {
                    b.Navigation("BuilderPostSkills");

                    b.Navigation("BuilderSkills");

                    b.Navigation("ContractorPostSkills");
                });

            modelBuilder.Entity("Data.Entities.SmallBill", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Data.Entities.SystemCategories", b =>
                {
                    b.Navigation("ProductSystemCategories");
                });

            modelBuilder.Entity("Data.Entities.Type", b =>
                {
                    b.Navigation("Builder");

                    b.Navigation("BuilderPostTypes");

                    b.Navigation("ContractorPostTypes");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("PostCommitments");

                    b.Navigation("Saves");
                });

            modelBuilder.Entity("Data.Entities.Verify", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
